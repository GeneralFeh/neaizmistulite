import os
import json
from datetime import datetime, timedelta, time as dt_time
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler,
    MessageHandler, filters, ConversationHandler
)

DATA_FILE = "data.json"
SETTINGS_FILE = "settings.json"

# --- —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
SET_TIME, SET_DAY = range(2)

# --- –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_settings():
    default = {"hour": 7, "minute": 30, "report_day": 0}  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not os.path.exists(SETTINGS_FILE):
        return default
    with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return default

def save_settings(settings):
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings, f, ensure_ascii=False, indent=2)

# --- –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    keyboard = [
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üíä –í—ã–ø–∏–ª–∞!")],
        [KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
def settings_menu():
    keyboard = [
        [KeyboardButton("‚è∞ –ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è"), KeyboardButton("üìÖ –ü–æ–º–µ–Ω—è—Ç—å –¥–µ–Ω—å –æ—Ç—á—ë—Ç–∞")],
        [KeyboardButton("üóë –û–±–Ω—É–ª–∏—Ç—å –≤—Å–µ")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ üíä",
        reply_markup=main_menu()
    )

# --- —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user = str(update.effective_user.id)
    today = datetime.now().date()
    week_count = 0
    month_count = 0
    if user in data:
        for date_str in data[user]:
            dt = datetime.strptime(date_str, "%Y-%m-%d").date()
            if (today - dt).days < 7:
                week_count += 1
            if dt.month == today.month:
                month_count += 1
    await update.message.reply_text(f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {week_count}\nüóì –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {month_count}")

# --- —Ñ–∏–∫—Å–∏—Ä—É–µ–º '–≤—ã–ø–∏–ª–∞' ---
async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user = str(update.effective_user.id)
    today_str = datetime.now().strftime("%Y-%m-%d")
    if user not in data:
        data[user] = []
    if today_str in data[user]:
        await update.message.reply_text("‚úÖ –£–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!")
    else:
        data[user].append(today_str)
        save_data(data)
        await update.message.reply_text("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!")
        
# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ ---
async def change_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ß–ß:–ú–ú):", reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return SET_TIME

async def save_new_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        new_time = datetime.strptime(update.message.text, "%H:%M").time()
        settings = load_settings()
        settings["hour"] = new_time.hour
        settings["minute"] = new_time.minute
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time.strftime('%H:%M')}", reply_markup=main_menu())

        # --- –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ---
        job_queue = context.job_queue
        chat_id = update.effective_chat.id
        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
        for job in job_queue.get_jobs_by_name(f"reminder_{chat_id}"):
            job.schedule_removal()

        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        job_queue.run_daily(
            daily_reminder,
            time=new_time,
            name=f"reminder_{chat_id}",
            chat_id=chat_id
        )

    except ValueError:
        await update.message.reply_text("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.", reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))
        return SET_TIME
    return ConversationHandler.END

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω—è –æ—Ç—á—ë—Ç–∞ ---
async def change_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ (0-–ü–Ω ... 6-–í—Å):", reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return SET_DAY

async def save_new_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        day = int(update.message.text)
        if day not in range(7):
            raise ValueError
        settings = load_settings()
        settings["report_day"] = day
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –î–µ–Ω—å –æ—Ç—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {day}", reply_markup=main_menu())
    except ValueError:
        await update.message.reply_text("‚ö† –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 (–ü–Ω) –¥–æ 6 (–í—Å).", reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))
        return SET_DAY
    return ConversationHandler.END

# --- –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π ---
async def reset_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user = str(update.effective_user.id)
    if user in data:
        data[user] = []
        save_data(data)
    await update.message.reply_text("‚ôª –í—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±–Ω—É–ª–µ–Ω—ã!", reply_markup=main_menu())

# --- –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ ---
async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ConversationHandler.END

# --- –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = getattr(job, 'chat_id', None)
    if chat_id is None:
        return
    await context.bot.send_message(chat_id, "üíä –í—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–∫—É!", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üíä –í—ã–ø–∏–ª–∞!")]], resize_keyboard=True))

# --- —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
async def test_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.job_queue.run_once(daily_reminder, datetime.now() + timedelta(seconds=3), chat_id=update.effective_chat.id)
    await update.message.reply_text("‚è± –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã.")

# --- –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    TOKEN = os.environ.get("TOKEN")
    if not TOKEN:
        print("‚ö† –ü–æ—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("‚è∞ –ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è"), change_time),
            MessageHandler(filters.Regex("üìÖ –ü–æ–º–µ–Ω—è—Ç—å –¥–µ–Ω—å –æ—Ç—á—ë—Ç–∞"), change_day),
            MessageHandler(filters.Regex("üóë –û–±–Ω—É–ª–∏—Ç—å –≤—Å–µ"), reset_all)
        ],
        states={
            SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_time)],
            SET_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_day)],
        },
        fallbacks=[MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), go_back)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üíä –í—ã–ø–∏–ª–∞!"), mark_done))
    app.add_handler(MessageHandler(filters.Regex("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), show_stats))
    app.add_handler(MessageHandler(filters.Regex("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), lambda u, c: u.message.reply_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu())))
    app.add_handler(MessageHandler(filters.Regex("‚è± –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"), test_reminder))
    app.add_handler(conv_handler)

    # --- –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–Ω–∏–µ –Ω–∞ 7:30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
    # –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª /start (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å chat_id –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É,
    # –∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º None –∏ –∑–∞–ø—É—Å—Ç–∏–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º —Ä–∞–±–æ—Ç—É —Å –∑–∞–¥–∞—á–∞–º–∏
    async def on_startup(app):
        settings = load_settings()
        hour, minute = settings["hour"], settings["minute"]

        # –î–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        # –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —É –≤–∞—Å –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω chat_id.
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ chat_id —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ settings.json –∫–∞–∫ "chat_id"
        chat_id = settings.get("chat_id")
        if chat_id is None:
            print("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
            return

        # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for job in app.job_queue.get_jobs_by_name(f"reminder_{chat_id}"):
            job.schedule_removal()

        app.job_queue.run_daily(
            daily_reminder,
            time=dt_time(hour=hour, minute=minute),
            name=f"reminder_{chat_id}",
            chat_id=chat_id
        )

    app.post_init = on_startup

    # --- –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id ---
    async def start_and_save_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        settings = load_settings()
        if settings.get("chat_id") != chat_id:
            settings["chat_id"] = chat_id
            save_settings(settings)
            # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id, —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            hour, minute = settings["hour"], settings["minute"]
            for job in context.job_queue.get_jobs_by_name(f"reminder_{chat_id}"):
                job.schedule_removal()
            context.job_queue.run_daily(
                daily_reminder,
                time=dt_time(hour=hour, minute=minute),
                name=f"reminder_{chat_id}",
                chat_id=chat_id
            )
        await start(update, context)

    # –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handler start, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å chat_id
    app.handlers.clear()
    app.add_handler(CommandHandler("start", start_and_save_chat_id))
    app.add_handler(MessageHandler(filters.Regex("üíä –í—ã–ø–∏–ª–∞!"), mark_done))
    app.add_handler(MessageHandler(filters.Regex("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), show_stats))
    app.add_handler(MessageHandler(filters.Regex("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), lambda u, c: u.message.reply_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu())))
    app.add_handler(MessageHandler(filters.Regex("‚è± –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"), test_reminder))
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
