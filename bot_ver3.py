import json
import os
from datetime import datetime, timedelta, time as dt_time
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

# --- –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º ---
DATA_FILE = "data.json"
SETTINGS_FILE = "settings.json"

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
SET_TIME, SET_DAY = range(2)

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_settings():
    if not os.path.exists(SETTINGS_FILE):
        return {"hour": 7, "minute": 30, "report_day": 0}
    with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_settings(settings):
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings, f, ensure_ascii=False, indent=4)

# --- –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üíä –í—ã–ø–∏–ª–∞!"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç—Ä–µ–∫–µ—Ä —Ç–∞–±–ª–µ—Ç–æ–∫ üíä", reply_markup=reply_markup)

async def record_pill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = str(update.effective_user.id)
    data = load_data()
    today = datetime.now().strftime("%Y-%m-%d")
    data.setdefault(user, []).append(today)
    save_data(data)
    await update.message.reply_text("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = str(update.effective_user.id)
    data = load_data().get(user, [])
    now = datetime.now()
    week_ago = now - timedelta(days=7)
    month_ago = now - timedelta(days=30)
    week_count = sum(1 for d in data if datetime.strptime(d, "%Y-%m-%d") >= week_ago)
    month_count = sum(1 for d in data if datetime.strptime(d, "%Y-%m-%d") >= month_ago)
    await update.message.reply_text(
        f"üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {week_count}\nüìÖ –ó–∞ –º–µ—Å—è—Ü: {month_count}"
    )

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("‚è∞ –ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è"), KeyboardButton("üìÖ –ü–æ–º–µ–Ω—è—Ç—å –¥–µ–Ω—å –æ—Ç—á—ë—Ç–∞")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=reply_markup)

async def change_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:15)")
    return SET_TIME

async def save_new_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        new_time = datetime.strptime(update.message.text, "%H:%M").time()
        settings = load_settings()
        settings["hour"] = new_time.hour
        settings["minute"] = new_time.minute
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time.strftime('%H:%M')}")
    except ValueError:
        await update.message.reply_text("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
    return ConversationHandler.END

async def change_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ):")
    return SET_DAY

async def save_new_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        day = int(update.message.text)
        if day not in range(7):
            raise ValueError
        settings = load_settings()
        settings["report_day"] = day
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –î–µ–Ω—å –æ—Ç—á—ë—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {day}")
    except ValueError:
        await update.message.reply_text("‚ö† –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 6.")
    return ConversationHandler.END

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ConversationHandler.END

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    for user in load_data().keys():
        await context.bot.send_message(
            chat_id=user,
            text="üíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É!",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üíä –í—ã–ø–∏–ª–∞!")]], resize_keyboard=True)
        )

async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    for user, dates in data.items():
        now = datetime.now()
        week_ago = now - timedelta(days=7)
        week_count = sum(1 for d in dates if datetime.strptime(d, "%Y-%m-%d") >= week_ago)
        month_ago = now - timedelta(days=30)
        month_count = sum(1 for d in dates if datetime.strptime(d, "%Y-%m-%d") >= month_ago)
        await context.bot.send_message(
            chat_id=user,
            text=f"üìä –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: {week_count}\nüìÖ –ó–∞ –º–µ—Å—è—Ü: {month_count}"
        )

async def test_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏–¥—ë—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    await context.job_queue.run_once(send_test_message, when=3, chat_id=update.effective_chat.id)

async def send_test_message(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text="üíä –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    TOKEN = os.environ["TOKEN"]
    app = ApplicationBuilder().token(TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üíä –í—ã–ø–∏–ª–∞!"), record_pill))
    app.add_handler(MessageHandler(filters.Regex("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), show_stats))
    app.add_handler(MessageHandler(filters.Regex("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), settings_menu))
    app.add_handler(MessageHandler(filters.Regex("üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), test_notification))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("‚è∞ –ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è"), change_time),
            MessageHandler(filters.Regex("üìÖ –ü–æ–º–µ–Ω—è—Ç—å –¥–µ–Ω—å –æ—Ç—á—ë—Ç–∞"), change_day)
        ],
        states={
            SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_time)],
            SET_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_day)],
        },
        fallbacks=[MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), go_back)],
    )
    app.add_handler(conv_handler)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    job_queue = app.job_queue
    settings = load_settings()
    reminder_time = dt_time(hour=settings["hour"], minute=settings["minute"])
    report_day = settings["report_day"]

    job_queue.run_daily(daily_reminder, reminder_time)
    job_queue.run_daily(weekly_report, reminder_time, days=(report_day,))

    app.run_polling()

if __name__ == "__main__":
    main()
