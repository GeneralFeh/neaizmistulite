import os
import json
from datetime import datetime, timedelta, time
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue

DATA_FILE = "data.json"
TOKEN = os.environ["TOKEN"]  # –í Render: Environment Variables -> TOKEN

# --- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

def record_today(chat_id):
    data = load_data()
    today = datetime.now().strftime("%Y-%m-%d")
    data.setdefault(str(chat_id), []).append(today)
    save_data(data)

def count_last_week(chat_id):
    data = load_data()
    today = datetime.now()
    week_ago = today - timedelta(days=7)
    dates = data.get(str(chat_id), [])
    return sum(1 for d in dates if week_ago.strftime("%Y-%m-%d") <= d <= today.strftime("%Y-%m-%d"))

def count_total(chat_id):
    data = load_data()
    return len(data.get(str(chat_id), []))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    keyboard = [
        [KeyboardButton("üíä –í—ã–ø–∏–ª–∞")],
        [KeyboardButton("üìã –ö–æ–º–∞–Ω–¥—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ —Ç–∞–±–ª–µ—Ç–∫–∏.", 
        reply_markup=reply_markup
    )

async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    record_today(chat_id)
    await update.message.reply_text("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ! ‚úÖ")

async def show_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    last_week = count_last_week(chat_id)
    total = count_total(chat_id)
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üíä –í—ã–ø–∏–ª–∞ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n\n"
        f"–¢–∞–±–ª–µ—Ç–æ–∫ –≤—ã–ø–∏—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {last_week}\n"
        f"–í—Å–µ–≥–æ —Ç–∞–±–ª–µ—Ç–æ–∫: {total}"
    )
    await update.message.reply_text(text)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in context.job.chat_ids:
        keyboard = [[KeyboardButton("üíä –í—ã–ø–∏–ª–∞")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id, "–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É! üíä", reply_markup=reply_markup)

async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in context.job.chat_ids:
        last_week = count_last_week(chat_id)
        await context.bot.send_message(chat_id, f"–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é:\n–¢–∞–±–ª–µ—Ç–æ–∫ –≤—ã–ø–∏—Ç–æ: {last_week}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(MessageHandler(filters.Regex("üíä –í—ã–ø–∏–ª–∞"), mark_done))
    app.add_handler(MessageHandler(filters.Regex("üìã –ö–æ–º–∞–Ω–¥—ã"), show_commands))

    # --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
    job_queue = app.job_queue

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 9:00
    job_queue.run_daily(daily_reminder, time(hour=9, minute=0))

    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00
    job_queue.run_daily(weekly_report, time(hour=9, minute=0), days=(0,))  # 0 = Monday

    app.run_polling()

if __name__ == "__main__":
    main()
