from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from datetime import datetime, timedelta, time as dt_time
import json
import os

TOKEN = os.environ["TOKEN"]
DATA_FILE = "data.json"
DEFAULT_REMINDER_TIME = dt_time(hour=9, minute=0)  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è

# ------------------ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ------------------

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            content = f.read().strip()
            if not content:
                return {}
            return json.loads(content)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

def record_today(chat_id):
    chat_id = str(chat_id)
    today = datetime.now().strftime("%Y-%m-%d")
    data = load_data()
    if chat_id not in data:
        data[chat_id] = []
    if today not in data[chat_id]:
        data[chat_id].append(today)
        save_data(data)
        return True
    return False

# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    keyboard = [
        [KeyboardButton("üìã –ö–æ–º–∞–Ω–¥—ã"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üíä –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=reply_markup
    )

    # –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if context.job_queue:
        if not context.job_queue.get_jobs_by_name(f"reminder_{chat_id}"):
            context.job_queue.run_daily(
                send_reminder, DEFAULT_REMINDER_TIME, chat_id=chat_id, name=f"reminder_{chat_id}"
            )

        # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏—á–Ω—ã–π –æ—Ç—á—ë—Ç
        if not context.job_queue.get_jobs_by_name(f"report_{chat_id}"):
            context.job_queue.run_daily(
                weekly_report, dt_time(hour=9, minute=0), days=(0,), chat_id=chat_id, name=f"report_{chat_id}"
            )

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    keyboard = [[InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data="done")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text="üíä –í—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–∫—É", reply_markup=reply_markup)

async def push(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data="done")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üíä –í—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–∫—É", reply_markup=reply_markup)

async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if record_today(chat_id):
        await update.message.reply_text("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!")
    else:
        await update.message.reply_text("üíä –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è.")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "done":
        if record_today(query.message.chat_id):
            await query.edit_message_text(text="‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!")
        else:
            await query.edit_message_text(text="üíä –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è.")

# ------------------ –ê–≤—Ç–æ-–æ—Ç—á—ë—Ç ------------------

async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    data = load_data()
    dates = data.get(str(chat_id), [])

    today = datetime.now()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)

    week_count = sum(1 for d in dates if datetime.strptime(d, "%Y-%m-%d") >= week_ago)
    month_count = sum(1 for d in dates if datetime.strptime(d, "%Y-%m-%d") >= month_ago)

    msg = f"üìä –û—Ç—á—ë—Ç:\n–î–Ω–µ–π –ø—Ä–æ–ø–∏—Ç–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n–î–Ω–µ–π –ø—Ä–æ–ø–∏—Ç–æ –∑–∞ –º–µ—Å—è—Ü: {month_count}"
    await context.bot.send_message(chat_id=chat_id, text=msg)

# ------------------ –°–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ------------------

async def settime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) != 1 or ":" not in context.args[0]:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π /settime –ß–ß:–ú–ú")
        return

    try:
        hours, minutes = map(int, context.args[0].split(":"))
        new_time = dt_time(hour=hours, minute=minutes)
    except:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π /settime –ß–ß:–ú–ú")
        return

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if context.job_queue:
        for job in context.job_queue.get_jobs_by_name(f"reminder_{chat_id}"):
            job.schedule_removal()

        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
        context.job_queue.run_daily(send_reminder, new_time, chat_id=chat_id, name=f"reminder_{chat_id}")

    await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {context.args[0]} ‚úÖ")

# ------------------ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é ------------------

async def weekly_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = load_data()
    dates = data.get(str(chat_id), [])

    today = datetime.now()
    week_ago = today - timedelta(days=7)
    week_count = sum(1 for d in dates if datetime.strptime(d, "%Y-%m-%d") >= week_ago)

    await update.message.reply_text(f"üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –≤—ã –ø—Ä–∏–Ω—è–ª–∏ {week_count} —Ç–∞–±–ª–µ—Ç–æ–∫ üíä")

# ------------------ –°–ø—Ä–∞–≤–∫–∞ ------------------

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = (
        "/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/push ‚Äî –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
        "/done ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É –≤—Ä—É—á–Ω—É—é\n"
        "/settime –ß–ß:–ú–ú ‚Äî –°–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    await update.message.reply_text(f"üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n{commands}")

async def show_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await help_command(update, context)

# ------------------ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ------------------

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("push", push))
    app.add_handler(CommandHandler("done", mark_done))
    app.add_handler(CommandHandler("settime", settime))
    app.add_handler(CommandHandler("help", help_command))

    # –∫–Ω–æ–ø–∫–∏ callback
    app.add_handler(CallbackQueryHandler(button))

    # –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìã –ö–æ–º–∞–Ω–¥—ã"), show_commands))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"), weekly_stats))

    # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
