import json
import os
from datetime import datetime, timedelta, time
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

DATA_FILE = "data.json"
SETTINGS_FILE = "settings.json"

# ---------------- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ----------------
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        content = f.read().strip()
        return json.loads(content) if content else {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def record_today():
    data = load_data()
    today = datetime.now().strftime("%Y-%m-%d")
    if today in data:
        return False
    data[today] = True
    save_data(data)
    return True

def get_stats():
    data = load_data()
    today = datetime.now()
    week_ago = today - timedelta(days=7)
    month_start = today.replace(day=1)
    week_count = sum(1 for d in data if week_ago.strftime("%Y-%m-%d") <= d <= today.strftime("%Y-%m-%d"))
    month_count = sum(1 for d in data if month_start.strftime("%Y-%m-%d") <= d <= today.strftime("%Y-%m-%d"))
    return week_count, month_count

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------
def load_settings():
    if not os.path.exists(SETTINGS_FILE):
        return {"report_day": 0}  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
        content = f.read().strip()
        return json.loads(content) if content else {"report_day": 0}

def save_settings(settings):
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings, f, ensure_ascii=False, indent=2)

# ---------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------
def main_keyboard():
    keyboard = [
        [KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("–í—ã–ø–∏–ª–∞!")],
        [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def settings_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –¥–µ–Ω—å")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def back_to_main_keyboard():
    keyboard = [[KeyboardButton("–ù–∞–∑–∞–¥")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ---------------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏.", reply_markup=main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    settings = context.bot_data.get("settings", load_settings())

    if text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        week, month = get_stats()
        await update.message.reply_text(f"–¢–∞–±–ª–µ—Ç–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: {week}\n–¢–∞–±–ª–µ—Ç–∫–∏ –∑–∞ –º–µ—Å—è—Ü: {month}")

    elif text == "–í—ã–ø–∏–ª–∞!":
        if record_today():
            await update.message.reply_text("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!")
        else:
            await update.message.reply_text("–£–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è!")

    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=settings_keyboard())

    elif text == "–ü–æ–º–µ–Ω—è—Ç—å –¥–µ–Ω—å":
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        keyboard = [[KeyboardButton(day) for day in days[:4]],
                    [KeyboardButton(day) for day in days[4:]],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        context.user_data["awaiting_day"] = True

    elif text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
        context.user_data["awaiting_day"] = False

    elif context.user_data.get("awaiting_day"):
        days_dict = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,"–í—Ç–æ—Ä–Ω–∏–∫":1,"–°—Ä–µ–¥–∞":2,"–ß–µ—Ç–≤–µ—Ä–≥":3,"–ü—è—Ç–Ω–∏—Ü–∞":4,"–°—É–±–±–æ—Ç–∞":5,"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6}
        if text in days_dict:
            settings["report_day"] = days_dict[text]
            save_settings(settings)
            context.bot_data["settings"] = settings
            context.user_data["awaiting_day"] = False
            await update.message.reply_text(f"–î–µ–Ω—å –æ—Ç—á—ë—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {text}", reply_markup=main_keyboard())
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞")

    elif text == "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        chat_id = update.message.chat_id
        context.job_queue.run_once(send_today_reminder, when=3, data={"chat_id": chat_id})
        await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã.")

# ---------------- Inline –∫–Ω–æ–ø–∫–∞ "–í—ã–ø–∏–ª–∞!" ----------------
async def send_today_reminder(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data["chat_id"]
    keyboard = [[InlineKeyboardButton("–í—ã–ø–∏–ª–∞!", callback_data="done")]]
    markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id, "üíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–∫—É —Å–µ–≥–æ–¥–Ω—è!", reply_markup=markup)

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "done":
        if record_today():
            await query.edit_message_text("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!")
        else:
            await query.edit_message_text("–£–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è!")

# ---------------- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ----------------
async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    chat_id = list(context.bot_data.keys())[0] if context.bot_data else None
    if chat_id:
        week, month = get_stats()
        await context.bot.send_message(chat_id, f"–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é:\n–¢–∞–±–ª–µ—Ç–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: {week}\n–¢–∞–±–ª–µ—Ç–∫–∏ –∑–∞ –º–µ—Å—è—Ü: {month}")

# ---------------- –ó–∞–ø—É—Å–∫ ----------------
def main():
    import os
    TOKEN = os.environ["TOKEN"]
    app = ApplicationBuilder().token(TOKEN).build()

    settings = load_settings()
    app.bot_data["settings"] = settings

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(callback_query_handler))

    # --- JobQueue: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 7:30 ---
    app.job_queue.run_daily(send_today_reminder, time(7,30), name="daily_reminder")
    # --- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ---
    app.job_queue.run_daily(weekly_report, time(7,30), days=(settings["report_day"],), name="weekly_report")

    app.run_polling()

if __name__ == "__main__":
    main()
