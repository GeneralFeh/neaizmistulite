import json
import os
from datetime import datetime, timedelta, time
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

DATA_FILE = "data.json"

# --- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        content = f.read().strip()
        return json.loads(content) if content else {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def record_today():
    data = load_data()
    today = datetime.now().strftime("%Y-%m-%d")
    if today in data:
        return False
    data[today] = True
    save_data(data)
    return True

def get_stats():
    data = load_data()
    today = datetime.now()
    week_ago = today - timedelta(days=7)
    month_start = today.replace(day=1)
    week_count = sum(1 for d in data if week_ago.strftime("%Y-%m-%d") <= d <= today.strftime("%Y-%m-%d"))
    month_count = sum(1 for d in data if month_start.strftime("%Y-%m-%d") <= d <= today.strftime("%Y-%m-%d"))
    return week_count, month_count

# --- –ë–æ—Ç ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("–í—ã–ø–∏–ª–∞!")],
        [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏.", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        week, month = get_stats()
        await update.message.reply_text(f"–¢–∞–±–ª–µ—Ç–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: {week}\n–¢–∞–±–ª–µ—Ç–∫–∏ –∑–∞ –º–µ—Å—è—Ü: {month}")
    elif text == "–í—ã–ø–∏–ª–∞!":
        if record_today():
            await update.message.reply_text("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!")
        else:
            await update.message.reply_text("–£–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è!")
    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        keyboard = [
            [KeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è"), KeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –¥–µ–Ω—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=reply_markup)
    elif text == "–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")
        context.user_data["awaiting_time"] = True
    elif text == "–ü–æ–º–µ–Ω—è—Ç—å –¥–µ–Ω—å":
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        keyboard = [[KeyboardButton(day) for day in days[:4]],
                    [KeyboardButton(day) for day in days[4:]]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=reply_markup)
        context.user_data["awaiting_day"] = True
    elif context.user_data.get("awaiting_time"):
        try:
            new_time = datetime.strptime(text, "%H:%M").time()
            context.user_data["reminder_time"] = new_time
            context.user_data["awaiting_time"] = False
            await update.message.reply_text(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time.strftime('%H:%M')}")
        except:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –û—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
    elif context.user_data.get("awaiting_day"):
        days_dict = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,"–í—Ç–æ—Ä–Ω–∏–∫":1,"–°—Ä–µ–¥–∞":2,"–ß–µ—Ç–≤–µ—Ä–≥":3,"–ü—è—Ç–Ω–∏—Ü–∞":4,"–°—É–±–±–æ—Ç–∞":5,"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6}
        if text in days_dict:
            context.user_data["report_day"] = days_dict[text]
            context.user_data["awaiting_day"] = False
            await update.message.reply_text(f"–î–µ–Ω—å –æ—Ç—á—ë—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {text}")
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    chat_id = list(context.bot_data.keys())[0] if context.bot_data else None
    if chat_id:
        await context.bot.send_message(chat_id, "üíä –ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É!")

async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    chat_id = list(context.bot_data.keys())[0] if context.bot_data else None
    if chat_id:
        week, month = get_stats()
        await context.bot.send_message(chat_id, f"–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é:\n–¢–∞–±–ª–µ—Ç–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: {week}\n–¢–∞–±–ª–µ—Ç–∫–∏ –∑–∞ –º–µ—Å—è—Ü: {month}")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    TOKEN = os.environ["TOKEN"]
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # --- JobQueue ---
    if not hasattr(app, "job_queue") or app.job_queue is None:
        import warnings
        warnings.warn("JobQueue –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –î–ª—è —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏ python-telegram-bot[job-queue]")
    else:
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 9:00
        app.job_queue.run_daily(daily_reminder, time(hour=9, minute=0))
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º
        app.job_queue.run_daily(weekly_report, time(hour=9, minute=0), days=(0,))

    app.run_polling()

if __name__ == "__main__":
    main()
